import { ChainConfig, ApiKey } from "./types";
interface EtherscanVerifyRequestParams {
    address: string;
    sourceCode: string;
    sourceName: string;
    contractName: string;
    compilerVersion: string;
    encodedConstructorArguments: string;
}
export declare class Etherscan {
    private _apiKey;
    private _apiUrl;
    private _browserUrl;
    constructor(apiKey: ApiKey | undefined, chainConfig: ChainConfig);
    isVerified(address: string): Promise<boolean>;
    verify({ address, sourceCode, sourceName, contractName, compilerVersion, encodedConstructorArguments, }: EtherscanVerifyRequestParams): Promise<EtherscanResponse>;
    getVerificationStatus(guid: string): Promise<EtherscanResponse>;
    getContractUrl(address: string): string;
}
declare class EtherscanResponse {
    readonly status: number;
    readonly message: string;
    constructor(response: any);
    isPending(): boolean;
    isFailure(): boolean;
    isSuccess(): boolean;
    isBytecodeMissingInNetworkError(): boolean;
    isOk(): boolean;
}
export {};
//# sourceMappingURL=etherscan.d.ts.map